// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // first mux & a-register
    Mux16(a= instruction, b= outM2, sel= instruction[15], out= regA);
    Not(in= instruction[15], out= notAinst); 
    Or(a= notAinst, b= instruction[5], out= loadA);
    ARegister(in= regA, load= loadA, out= A, out[0..14]= addressM);

    // second mux: selects M if c-inst and a = 1, otherwise A
    And(a= instruction[15], b= instruction[12], out= selAM);
    Mux16(a= A, b= inM, sel= selAM, out= AM);
    
    // d-register: is only set in c instructions where d is specified
    And(a= instruction[15], b= instruction[4], out= loadD);
    DRegister(in= outM2, load= loadD, out= D);

    // ALU: note 'zr' and 'ng' are for controlling PC
    ALU(x= D, y= AM, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= outM, out= outM2, zr= zr, ng= ng);

    // program counter
    Not(in= ng, out= ps);
    Not(in= zr, out= nzr);
    And(a= ps, b= nzr, out= psnzr);  // must be careful because non-negative =/= positive

    And(a= instruction[15], b= instruction[2], out= jlt);
    And(a= ng, b= jlt, out= j1);
    
    And(a= instruction[15], b= instruction[1], out= jeq);
    And(a= zr, b= jeq, out= j2);
    
    And(a= instruction[15], b= instruction[0], out= jgt);
    And(a= psnzr, b= jgt, out= j3);

    Or(a= j1, b= j2, out= j12);
    Or(a= j12, b= j3, out= jmp);

    PC(in= A, load= jmp, inc= true, reset= reset, out[0..14]= pc);
    
    // other stuff
    And(a= instruction[15], b= instruction[3], out= writeM);
}